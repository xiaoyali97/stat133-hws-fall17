#convert it to a matrix
heatmap(as.matrix(USJudgeRatings))
#add a title
title(main = "Heat Map of Judge")
#convert it to a matrix
heatmap(as.matrix(USJudgeRatings))
#add a title
title(main = "Heat Map of Judge Rating")
ggplot(titanic_raw) +
#pick the attribute we are interested in
geom_mosaic(aes(x = product(Survived,AgeDecade), fill = factor(Survived))) +
#adjust the x-axis to make it more readable
theme(axis.text.x = element_text(angle = -25, hjust = .1)) +
#facet the data into female and male
facet_grid(Sex ~ .) +
#add title of the graph
labs(x="Age in Decades ", title='f(Survived, AgeDecade | Gender)') +
#add label to legend
scale_fill_discrete(name="Survived", labels = c("No", "Yes"))
knitr::opts_chunk$set(echo = TRUE)
#datasets contains most of the database we are going to use
library(datasets)
#graphic
library(ggplot2)
library(ggmosaic)
head(USJudgeRatings)
#convert it to a matrix
heatmap(as.matrix(USJudgeRatings))
#add a title
title(main = "Heat Map of Judge Rating")
head(airquality)
ggplot(airquality, aes(Day, Month)) +
geom_tile(aes(fill = Temp)) +
ggtitle(label = "Heat Map")
HairEyeColor
mosaicplot(HairEyeColor)
#download .csv file online
download.file(url = "https://raw.githubusercontent.com/vincentarelbundock/Rdatasets/master/csv/datasets/Titanic.csv", destfile = "titanic_raw.csv")
#read in data
titanic_raw <- read.csv(file = "titanic_raw.csv")
head(titanic_raw)
#Initialize a empty character vector
AgeDecade <- rep(" ", nrow(titanic_raw))
#Use a for loop to categorize each passengers' age
for(i in 1:nrow(titanic_raw)){
x = titanic_raw$Age[i]
if(is.na(x)){AgeDecade[i] = "unknown"}
else if(x >= 0 & x < 10){AgeDecade[i] = "0 - 9"}
else if(x >= 10 & x < 20){AgeDecade[i] = "10 - 19"}
else if(x >= 20 & x < 30){AgeDecade[i] = "20 - 29"}
else if(x >= 30 & x < 40){AgeDecade[i] = "30 - 39"}
else if(x >= 40 & x < 50){AgeDecade[i] = "40 - 49"}
else if(x >= 50 & x < 60){AgeDecade[i] = "50 - 59"}
else if(x >= 60 & x < 70){AgeDecade[i] = "60 - 69"}
else{AgeDecade[i] = "70 +"}
}
#Add that vector into a column of the dataframe
titanic_raw$AgeDecade <- as.factor(AgeDecade)
head(titanic_raw)
ggplot(titanic_raw) +
#pick the attribute we are interested in
geom_mosaic(aes(x = product(Survived,AgeDecade), fill = factor(Survived))) +
#adjust the x-axis to make it more readable
theme(axis.text.x = element_text(angle = -25, hjust = .1)) +
#facet the data into female and male
facet_grid(Sex ~ .) +
#add title of the graph
labs(x="Age in Decades ", title='f(Survived, AgeDecade | Gender)') +
#add label to legend
scale_fill_discrete(name="Survived", labels = c("No", "Yes"))
install.packages("corrgram")
library(corrgram)
library(corrgram)
#datasets contains most of the database we are going to use
library(datasets)
#graphic
library(ggplot2)
library(ggmosaic)
library(corrgram)
library("corrgram", lib.loc="~/R/win-library/3.4")
library(corrgram)
.libPaths()
library(corrgram)
remove.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("corrgram")
library(corrgram)
?corrgram
remove.packages("corrgram")
knitr::opts_chunk$set(echo = TRUE)
library(plotly)
cane
library(boot)
cane
head(cane)
plot_ly(cane, x = ~n, y = ~r, z = ~x, color = ~block )
plot_ly(cane, x = ~n, y = ~r, z = ~x, color = ~block ) %>%
add_markers()
plot_ly(cane, x = ~n, y = ~r, z = ~x, color = ~block, alpha = 0.5 ) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'total number of shoots in each plot'),
yaxis = list(title = 'number of diseased shoots'),
zaxis = list(title = 'number of pieces of the stems')))
plot_ly(cane, x = ~n, y = ~r, z = ~x, color = ~block ) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = 'total number of shoots in each plot'),
yaxis = list(title = 'number of diseased shoots'),
zaxis = list(title = 'number of pieces of the stems'))) %>%
add_annotations( text="block", xref="paper", yref="paper",
legendtitle=TRUE, showarrow=FALSE )
plot_ly(cane, x = ~n, y = ~r, z = ~x, color = ~block ) %>%
add_markers() %>%
layout(scene = list(
xaxis = list(title = 'number of shoots in each plot'),
yaxis = list(title = 'number of diseased shoots'),
zaxis = list(title = 'number of pieces of the stems')),
annotations = list(
x = 1.13, y = 1.05,
text = 'Block',
xref = 'paper',
yref = 'paper',
showarrow = FALSE))
plot_ly(cane, x = ~n, y = ~r, z = ~x, color = ~block ) %>%
add_markers() %>%
layout(scene = list(
xaxis = list(title = '# shoots in each plot'),
yaxis = list(title = '# diseased shoots'),
zaxis = list(title = '# pieces of the stems')),
annotations = list(
x = 1.13, y = 1.05,
text = 'Block',
xref = 'paper',
yref = 'paper',
showarrow = FALSE))
cane
head(cane)
plot_ly(cane, x = ~n, y = ~r, z = ~x, color = ~block,
colors = c('#4AC6B7', '#1972A4', '#965F8A', '#FF7070')) %>%
#add label to axis
add_markers() %>%
#change the label of the axis
layout(scene = list(
xaxis = list(title = '# shoots in each plot'),
yaxis = list(title = '# diseased shoots'),
zaxis = list(title = '# pieces of the stems')),
#change the label of the legend
annotations = list(
x = 1.13, y = 1.05,
text = 'Block',
xref = 'paper',
yref = 'paper',
showarrow = FALSE))
volcano
volcano
library(MASS)
topo
plot_ly(topo) %>% add_surface()
plot_ly(z = ~topo) %>% add_surface()
topo
plot_ly(z = ~as.matrix(topo)) %>% add_surface()
topo$x <- 50 * topo$x
topo$y <- 50 * topo$y
plot_ly(z = ~as.matrix(topo)) %>% add_surface()
as.matrix(topo)
plot_ly(z = ~as.matrix(USJudgeRatings)) %>% add_surface()
kd <- with(MASS::geyser, MASS::kde2d(duration, waiting, n = 50))
kd
?kde2d
cars
cars
kd <- with(cars, kde2d(speed, dist, n = 50))
kd
head(cars)
kd <- with(cars, kde2d(speed, dist, n = 50))
plot_ly(x = kd$x, y = kd$y, z = kd$z) %>% add_surface()
?kerneldensityestimation
??kerneldensityestimation
density(cars, n = 50)
?remove.packages
?unloadpackages
??unloadpackages
head(cars)
#prepare the data using kernel density estimation
#MASS:: allows us to call functions without actually loading MASS package
kd <- with(cars, MASS::kde2d(speed, dist, n = 50))
plot_ly(x = kd$x, y = kd$y, z = kd$z) %>% add_surface()
#prepare the data using kernel density estimation
#MASS:: allows us to call functions without actually loading MASS package
kd <- with(cars, MASS::kde2d(speed, dist, n = 50))
plot_ly(x = kd$x, y = kd$y, z = kd$z) %>%
add_surface() %>%
#change the label of the axis
layout(scene = list(
xaxis = list(title = 'Speed (mph)'),
yaxis = list(title = 'Stopping Distance (ft)')))
#prepare the data using kernel density estimation
#MASS:: allows us to call functions without actually loading MASS package
kd <- with(cars, MASS::kde2d(speed, dist, n = 50))
str(kd)
#prepare the data using kernel density estimation
#MASS:: allows us to call functions without actually loading MASS package
kd <- with(cars, MASS::kde2d(speed, dist, n = 25))
str(kd)
plot_ly(x = kd$x, y = kd$y, z = kd$z) %>%
#plot the 3d surface
add_surface() %>%
#change the label of the axis
layout(scene = list(
xaxis = list(title = 'Speed (mph)'),
yaxis = list(title = 'Stopping Distance (ft)')))
#prepare the data using kernel density estimation
#MASS:: allows us to call functions without actually loading MASS package
kd <- with(cars, MASS::kde2d(speed, dist, n = 50))
str(kd)
plot_ly(x = kd$x, y = kd$y, z = kd$z) %>%
#plot the 3d surface
add_surface() %>%
#change the label of the axis
layout(scene = list(
xaxis = list(title = 'Speed (mph)'),
yaxis = list(title = 'Stopping Distance (ft)')))
#prepare the data using kernel density estimation
#MASS:: allows us to call functions without actually loading MASS package
#n is the number of grid points in each direction,
#the larger of n, the smoother your graph would looks like
kd <- with(cars, MASS::kde2d(x = speed, y = dist, n = 50))
str(kd)
